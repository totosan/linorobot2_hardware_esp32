/*
 * Author: Automatic Addison
 * Website: https://automaticaddison.com
 * Description: Count the number of encoder pulses per revolution.  
 */
#include <Arduino.h>
#include <micro_ros_platformio.h>
#include <stdio.h>

#include <nav_msgs/msg/odometry.h>
#include <sensor_msgs/msg/imu.h>
#include <sensor_msgs/msg/magnetic_field.h>
#include <sensor_msgs/msg/battery_state.h>
#include <sensor_msgs/msg/range.h>
#include <geometry_msgs/msg/twist.h>
#include <geometry_msgs/msg/vector3.h>

#include "config.h"
#include "syslog.h"
#include "motor.h"
#include "kinematics.h"
#include "pid.h"
#include "odometry.h"
#include "imu.h"
#include "mag.h"
#define ENCODER_USE_INTERRUPTS
#define ENCODER_OPTIMIZE_INTERRUPTS
#include "encoder.h"
#include "battery.h"
#include "range.h"
#include "lidar.h"
#include "wifis.h"
#include "ota.h"
// Encoder output to Arduino Interrupt pin. Tracks the pulse count.
 
// Keep track of the number of right wheel pulses
volatile long MOTOR1_pulse_FWD_count = 0;
volatile long MOTOR1_pulse_REV_count = 0;
volatile long MOTOR2_pulse_FWD_count = 0;
volatile long MOTOR2_pulse_REV_count = 0;
 
void setup() {
 
  // Open the serial port at 9600 bps
  Serial.begin(115200); 
 
  // Set pin states of the encoder
  pinMode(MOTOR1_ENCODER_A , INPUT_PULLUP);
  pinMode(MOTOR1_ENCODER_B , INPUT_PULLUP);
  pinMode(MOTOR2_ENCODER_A , INPUT_PULLUP);
  pinMode(MOTOR2_ENCODER_B , INPUT_PULLUP);
 
  // Every time the pin goes high, this is a pulse
  attachInterrupt(digitalPinToInterrupt(MOTOR1_ENCODER_A), motor1_pulse_counter_fwd, RISING);
  attachInterrupt(digitalPinToInterrupt(MOTOR1_ENCODER_B), motor1_pulse_counter_rev, RISING);
  attachInterrupt(digitalPinToInterrupt(MOTOR2_ENCODER_A), motor2_pulse_counter_fwd, RISING);
  attachInterrupt(digitalPinToInterrupt(MOTOR2_ENCODER_B), motor2_pulse_counter_rev, RISING);
   
}
 
void loop() {
  
    Serial.print(" Pulses: ");
    printf("MOTOR1: FWD %d  REV %d\n",MOTOR1_pulse_FWD_count, MOTOR1_pulse_REV_count);  
    printf("MOTOR2: FWD %d  REV %d\n",MOTOR2_pulse_FWD_count, MOTOR2_pulse_REV_count);  
}
 
// Increment the number of pulses by 1
void motor1_pulse_counter_fwd() {
  MOTOR1_pulse_FWD_count++;
}
void motor1_pulse_counter_rev() {
  MOTOR1_pulse_REV_count++;
}
void motor2_pulse_counter_fwd() {
  MOTOR2_pulse_FWD_count++;
}
void motor2_pulse_counter_rev() {
  MOTOR2_pulse_REV_count++;
}